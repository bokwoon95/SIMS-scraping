git fetch --all
git reset --hard origin/master

✓ Get refined_search to have hits

✓ dump all tuples

✓ Rather than checking for recursion count, check if further refinement is possible.

✓ don't recurse obtain_id if the string is already two words short

✓ In uncertain situations, if number of elements in results is <= 3, dump tuples

Depending on whether the res or res_EXACT_match is passed in, filter_and_verify_multiple_entries() might have to return the test_method as well.
    if it's res_EXACT_match, the test_method is the same as what's already in the excel sheet
    if it's only res, the test_method would not be an exact match as the one in the excel sheet, and it should be noted in the test_id column for manual verification
> This is actually more complicated than it seems because obtain_id() only knows the string of the test_method, it doesn't know whether that string has been refined once or not. It also doesn't know which row that test_method is coming from.
> It can actually tell whether the test_method string's been refined before by checking if the recursion_level is 0. But the actual creation of test_ids is not handled by obtain_id() itself, it's handled by the two helper functions verify_single_entry() and filter_and_verify_multiple_entries().
    That means it has to pass the knowledge of the recursion_level down into these two functions, which must then implement some switching logic of returning either the test_method if the recursion_level is non zero and not if the recursion_level is zero.
    But I'm leery of adding even more variables to these functions because it makes the task of understanding these functions a lot harder.
    ◇ I might just leave these issues alone first unless a critical mismatch error happens
        ◇ Until then this means that the test_methods of the test_ids found by the program might not be exactly what the input test_method is

✓ Judge keyword matching by 3 metrics:
    1) How many keywords exist ✓
    2) How closely the order matches for these keywords (Don't care, dump everything)
    3) Are there any dealbreaker mismatches? (Don't care, dump everything)

✓ Given string A and string B, how do I check how many keywords in A exist in B?
    extract all keywords from A (by removing 'and', '&', 'of, etc) and store keywords in a list
    iterate over that keyword list and how many keywords manage to turn up in B

>>> For the LOVE of God, make an excel macro that can resize columns and set wrap for every column in the table

Implement smart column matching for the input excel file so that it can accept a wider variety of input table formats

Try to get python script to run from venv without installing python on the computer

Making script idempotent, so it doesn't matter if it's running on its input or output files, the result will be the same. 
    The id column regex check currently only involves an id regex, it should include any string that starts with 'Search' as well

Try importing specific parts of packages rather than everything

Maybe move the limit logic:
    limit = counter.limit if counter.limit>0 else self.input_df.shape[0]
into the counter object itself? So every invocation of obtain_id() doesn't have to recalculate this. Also it's less complexity in obtain_id() itself.

(WON'T FIX) Is verify_single_entry() really necessary? Can you reuse the general logic for filter_and_verify_multiple_entries() instead? Like using a list, then comparing its contents?
    Right now it's too tightly coupled for me to feel safe refactoring it away. It it ain't broke why fix

The final goal would be to extend this to scraping for units and their prices (or lack thereof) followed by automated test creation if they are missing. Then it would truly be an end-to-end solution.
